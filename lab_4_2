
 
 
 
 
#include <stdio.h> /* for fprintf() */
#include <stdlib.h> /* for exit() */
#include <unistd.h> /* for sleep() */
#include <pthread.h> /* for pthreads functions */
#include <semaphore.h> 
#define NTHREADS 3
int string_index = 0;
sem_t mutex;

pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t cond = PTHREAD_COND_INITIALIZER;

int counting=0;
 
char string_to_print[] = "0123456789";


void *ThreadB(void *arg) 
{
  
  
int tmp_index;
  
 sleep (1);	/* sleep 1 sec to allow all threads to start */
  
 
while (1)
    
    {
      pthread_mutex_lock(&lock);
 
tmp_index = string_index;
      
 
if (!(tmp_index + 1 > sizeof (string_to_print)))
	
	{
	  
 

	  
 
usleep (1);	/* sleep 1 usec */
	
 
}


      
 
string_index = tmp_index + 1;
      
 
if ((tmp_index + 1 > sizeof (string_to_print))&&(tmp_index==(1||2||5||6||9)))
	
	{
	    printf ("%c", string_to_print[tmp_index]);
	}
 if(string_index==10){
 
	// printf ("\n");
   
 
string_index = 0;  /* wrap around */
      
  
  

   pthread_cond_signal(&cond);
pthread_mutex_unlock(&lock);
    }else{
        pthread_cond_signal(&cond);
        pthread_cond_wait(&cond, &lock);
        pthread_mutex_unlock(&lock);
    }
}
pthread_exit(NULL);
return(NULL);
 
}


 
void *ThreadA(void *arg) 
{
  
  
int tmp_index;
  
 sleep (1);  /* sleep 1 sec to allow all threads to start */
  
 
while (1)
    
    {
      
 pthread_mutex_lock(&lock);
tmp_index = string_index;
      
 
if (!(tmp_index + 1 > sizeof (string_to_print)))
 
       {
        
 
printf ("%c", string_to_print[tmp_index]);
          
 
usleep (1);        /* sleep 1 usec */
     
 
}


      
 
string_index = tmp_index + 1;
      
 

           
if ((tmp_index + 1 > sizeof (string_to_print))&&(tmp_index==(0||3||4||7||8)))
      
       {
          printf ("%c", string_to_print[tmp_index]);
       }
 if(string_index==10){
printf ("\n");
      
 
string_index = 0;  /* wrap around */
      
  

   pthread_cond_signal(&cond);
pthread_mutex_unlock(&lock);
    }else{
        pthread_cond_signal(&cond);
        pthread_cond_wait(&cond, &lock);
        pthread_mutex_unlock(&lock);
    }
}
pthread_exit(NULL);
return(NULL);
 
}


 
 
int 
main (void) 
{
  
 
pthread_t thread1, thread2;
  
 
int k;

 
for (k = 0; k < 2; k++)
    
    {
       
 
printf ("Starting Thread %d\n", k + 1);
   
 
if (pthread_create (&thread1, NULL, &ThreadA, NULL) != 0)
      
       { 
       
 
printf ("Error creating thread %d\n", k + 1);
       
 
exit (-1);
        
 
}

if (pthread_create (&thread2, NULL, &ThreadB, NULL) != 0)
        
       { 
       
 
printf ("Error creating thread %d\n", k + 1);
       
 
exit (-1);
        
 
}

 
}
  
 
sleep (20);               /* sleep 20 secs to allow time for the threads to run */
  
 
/* before terminating them with pthread_cancel() */ 
    for (k = 0; k < 2; k++)
    
    {
      
 
 
pthread_cancel (ThreadA);
pthread_cancel (ThreadB);

    
 
}
  
 
pthread_exit (NULL);

 
}


 
 
 
